{
	"info": {
		"_postman_id": "aede3825-af5b-4ee4-b135-dae004d44e54",
		"name": "PPADS-GRUPOX",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37888468"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"let token = response.token;\r",
									"pm.environment.set(\"token\", token);\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields - token and expiresIn\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.token).to.exist;\r",
									"    pm.expect(responseData.expiresIn).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Token is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should be a non-empty string\");\r",
									"});\r",
									"\r",
									"pm.test(\"expiresIn is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.expiresIn).to.be.a('number').and.to.be.at.least(0, \"expiresIn should be a non-negative integer\");\r",
									"});\r",
									"\r",
									"pm.test(\"Success field is true\", function () {\r",
									"    pm.expect(pm.response.json().success).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"joao@ppads.com\",\r\n    \"password\": \"teste123\",\r\n    \"stayLoggedIn\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url-backend}}/auth/login",
							"host": [
								"{{url-backend}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields - success and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.success).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Success field is true\", function () {\r",
									"    pm.expect(pm.response.json().success).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"teste@ppads.com\",\r\n    \"newPassword\": \"teste123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url-backend}}/auth/updatePassword",
							"host": [
								"{{url-backend}}"
							],
							"path": [
								"auth",
								"updatePassword"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Success field is true\", function () {\r",
									"    pm.expect(pm.response.json().success).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url-backend}}/users/getAllUsers",
							"host": [
								"{{url-backend}}"
							],
							"path": [
								"users",
								"getAllUsers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields - success and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Success field is true\", function () {\r",
									"    pm.expect(pm.response.json().success).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Message field is a string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"teste\",\r\n    \"email\": \"teste@ppads.com\",\r\n    \"password\": \"teste123\",\r\n    \"isAdmin\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url-backend}}/users/createUser",
							"host": [
								"{{url-backend}}"
							],
							"path": [
								"users",
								"createUser"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields - success and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Success field is true\", function () {\r",
									"    pm.expect(pm.response.json().success).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Message field is a string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  pm.expect(responseData.message).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"teste2@ppads.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url-backend}}/users/deleteUser",
							"host": [
								"{{url-backend}}"
							],
							"path": [
								"users",
								"deleteUser"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Books",
			"item": [
				{
					"name": "Get All Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Success field is true\", function () {\r",
									"    pm.expect(pm.response.json().success).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url-backend}}/books/getAllBooks",
							"host": [
								"{{url-backend}}"
							],
							"path": [
								"books",
								"getAllBooks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Books By Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Success field is true\", function () {\r",
									"    pm.expect(pm.response.json().success).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url-backend}}/books/getBooksByCategory?category=14",
							"host": [
								"{{url-backend}}"
							],
							"path": [
								"books",
								"getBooksByCategory"
							],
							"query": [
								{
									"key": "category",
									"value": "14"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Books By Title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Success field is true\", function () {\r",
									"    pm.expect(pm.response.json().success).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url-backend}}/books/searchBookByTitle?title=Harry Potter",
							"host": [
								"{{url-backend}}"
							],
							"path": [
								"books",
								"searchBookByTitle"
							],
							"query": [
								{
									"key": "title",
									"value": "Harry Potter"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields - success and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Success field is true\", function () {\r",
									"    pm.expect(pm.response.json().success).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Message field is a string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Harry Potter e a Pedra Filosofal",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Harry Potter é um garoto cujos pais, feiticeiros, foram assassinados por um poderosíssimo bruxo quando ele ainda era um bebê. Ele foi levado, então, para a casa dos tios que nada tinham a ver com o sobrenatural. Pelo contrário. Até os 10 anos, Harry foi uma espécie de gata borralheira: maltratado pelos tios, herdava roupas velhas do primo gorducho, tinha óculos remendados e era tratado como um estorvo. No dia de seu aniversário de 11 anos, entretanto, ele parece deslizar por um buraco sem fundo, como o de Alice no país das maravilhas, que o conduz a um mundo mágico. Descobre sua verdadeira história e seu destino: ser um aprendiz de feiticeiro até o dia em que terá que enfrentar a pior força do mal, o homem que assassinou seus pais. O menino de olhos verde, magricela e desengonçado, tão habituado à rejeição, descobre, também, que é um herói no universo dos magos. Potter fica sabendo que é a única pessoa a ter sobrevivido a um ataque do tal bruxo do mal e essa é a causa da marca em forma de raio que ele carrega na testa. Ele não é um garoto qualquer, ele sequer é um feiticeiro qualquer ele é Harry Potter, símbolo de poder, resistência e um líder natural entre os sobrenaturais. A fábula, recheada de fantasmas, paredes que falam, caldeirões, sapos, unicórnios, dragões e gigantes, não é, entretanto, apenas um passatempo.",
									"type": "text"
								},
								{
									"key": "category",
									"value": "14",
									"type": "text"
								},
								{
									"key": "amount",
									"value": "10",
									"type": "text"
								},
								{
									"key": "cover",
									"type": "file",
									"src": "/C:/Users/conta/Downloads/HP e a Pedra Filosofal.jpg"
								}
							]
						},
						"url": {
							"raw": "{{url-backend}}/books/createBook",
							"host": [
								"{{url-backend}}"
							],
							"path": [
								"books",
								"createBook"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Book By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields - success and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Success field is true\", function () {\r",
									"    pm.expect(pm.response.json().success).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Message field is a string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  pm.expect(responseData.message).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"teste@ppads.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url-backend}}/books/deleteBook/?id=94326135-7b29-4675-84f0-8f4bf52c7fb8",
							"host": [
								"{{url-backend}}"
							],
							"path": [
								"books",
								"deleteBook",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "94326135-7b29-4675-84f0-8f4bf52c7fb8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields - success and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.success).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Success field is true\", function () {\r",
									"    pm.expect(pm.response.json().success).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id",
									"value": "acb43a42-5046-45d1-8dad-ad6d82b13ea2",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Harry Potter e a Pedra Filosofal",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Harry Potter é um garoto cujos pais, feiticeiros, foram assassinados por um poderosíssimo bruxo quando ele ainda era um bebê. Ele foi levado, então, para a casa dos tios que nada tinham a ver com o sobrenatural. Pelo contrário. Até os 10 anos, Harry foi uma espécie de gata borralheira: maltratado pelos tios, herdava roupas velhas do primo gorducho, tinha óculos remendados e era tratado como um estorvo. No dia de seu aniversário de 11 anos, entretanto, ele parece deslizar por um buraco sem fundo, como o de Alice no país das maravilhas, que o conduz a um mundo mágico. Descobre sua verdadeira história e seu destino: ser um aprendiz de feiticeiro até o dia em que terá que enfrentar a pior força do mal, o homem que assassinou seus pais. O menino de olhos verde, magricela e desengonçado, tão habituado à rejeição, descobre, também, que é um herói no universo dos magos. Potter fica sabendo que é a única pessoa a ter sobrevivido a um ataque do tal bruxo do mal e essa é a causa da marca em forma de raio que ele carrega na testa. Ele não é um garoto qualquer, ele sequer é um feiticeiro qualquer ele é Harry Potter, símbolo de poder, resistência e um líder natural entre os sobrenaturais. A fábula, recheada de fantasmas, paredes que falam, caldeirões, sapos, unicórnios, dragões e gigantes, não é, entretanto, apenas um passatempo.",
									"type": "text"
								},
								{
									"key": "category",
									"value": "14",
									"type": "text"
								},
								{
									"key": "amount",
									"value": "10",
									"type": "text"
								},
								{
									"key": "cover",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{url-backend}}/books/updateBook",
							"host": [
								"{{url-backend}}"
							],
							"path": [
								"books",
								"updateBook"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Category",
			"item": [
				{
					"name": "Get All Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Success field is true\", function () {\r",
									"    pm.expect(pm.response.json().success).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url-backend}}/books/categories",
							"host": [
								"{{url-backend}}"
							],
							"path": [
								"books",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Category By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Success field is true\", function () {\r",
									"    pm.expect(pm.response.json().success).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url-backend}}/books/categories/findById?category_id=1",
							"host": [
								"{{url-backend}}"
							],
							"path": [
								"books",
								"categories",
								"findById"
							],
							"query": [
								{
									"key": "category_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}